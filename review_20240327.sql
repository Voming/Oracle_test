SELECT DEPT_CODE 부서코드, SUM(SALARY), FLOOR(AVG(SALARY)) 평균, COUNT(*) 인원수 FROM 
EMPLOYEE GROUP BY DEPT_CODE order by dept_code;

SELECT DEPT_CODE, COUNt(BONUS) FROM EMPLOYEE GROUP BY DEPT_CODE ORDER BY DEPT_CODE;

SELECT DECODE(SUBSTR(EMP_NO, 8, 1), 1, '남', 2, '여') 성별, 
FLOOR(AVG(SALARY)) 평균, 
SUM(SALARY) 합계,
COUNT(*) 인원수
FROM EMPLOYEE GROUP BY DECODE(SUBSTR(EMP_NO, 8, 1), 1, '남', 2, '여');

SELECT DEPT_CODE, FLOOR(AVG(SALARY)) FROM EMPLOYEE
GROUP BY DEPT_CODE HAVING FLOOR(AVG(SALARY)) >= 3000000 ORDER BY 1;

SELECT DEPT_CODE, FLOOR(AVG(SALARY)) 
FROM EMPLOYEE
WHERE SALARY >= 3000000a
GROUP BY DEPT_CODE
ORDER BY 1;

SELECT JOB_CODE, SUM(SALARY) FROM EMPLOYEE
GROUP BY ROLLUP(JOB_CODE) ORDER BY 1;

SELECT JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY CUBE(JOB_CODE)
ORDER BY 1;

SELECT DEPT_CODE, JOB_CODE, SUM(SALARY) FROM EMPLOYEE 
GROUP BY ROLLUP(DEPT_CODE, JOB_CODE) ORDER BY 1;

SELECT DEPT_CODE, JOB_CODE, SUM(SALARY) FROM EMPLOYEE
GROUP BY CUBE(DEPT_CODE, JOB_CODE) ORDER BY 1;

SELECT DEPT_CODE, JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE, JOB_CODE)
UNION
SELECT '', JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY ROLLUP(JOB_CODE)
ORDER BY 1;

SELECT DEPT_CODE, JOB_CODE, SUM(SALARY),
CASE 
WHEN 
GROUPING(DEPT_CODE) = 0 AND GROUPING(JOB_CODE) = 1  -- DEPT_CODE기준 전체 합
THEN '부서별 합계'

WHEN 
GROUPING(DEPT_CODE) = 1 AND GROUPING(JOB_CODE) = 0 -- JOB_CODE기준 전체 합
THEN '직급별 합계'

WHEN 
GROUPING(DEPT_CODE) = 1 AND GROUPING(JOB_CODE) = 1 -- 모두 합
THEN '총 합계'

ELSE '그룹별 합계'

END AS 구분

FROM EMPLOYEE
GROUP BY CUBE(DEPT_CODE, JOB_CODE)
ORDER BY 1;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'
UNION  -- OR 연산과 같음
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY > 3000000;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5' OR SALARY > 3000000;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'
INTERSECT
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY > 3000000;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5' AND SALARY > 3000000;

SELECT DEPT_CODE, JOB_CODE, MANAGER_ID, FLOOR(AVG(SALARY)) 
FROM EMPLOYEE
GROUP BY GROUPING SETS(
(DEPT_CODE, JOB_CODE, MANAGER_ID), 
(DEPT_CODE, MANAGER_ID),
(JOB_CODE, MANAGER_ID));

SELECT EMP_NAME, JOB_CODE, DEPT_CODE, SALARY, (SELECT FLOOR(AVG(SALARY)) FROM EMPLOYEE) AVGSAL FROM EMPLOYEE
WHERE SALARY >= (SELECT FLOOR(AVG(SALARY)) FROM EMPLOYEE) ORDER BY 2;

SELECT EMP_NAME, JOB_CODE, DEPT_CODE, SALARY FROM EMPLOYEE
WHERE SALARY IN (SELECT MAX(SALARY) FROM EMPLOYEE GROUP BY DEPT_CODE) ORDER BY 3;

SELECT EMP_NAME, JOB_CODE, DEPT_CODE, HIRE_DATE FROM EMPLOYEE
WHERE (DEPT_CODE, JOB_CODE) IN 
(SELECT DEPT_CODE, JOB_CODE FROM EMPLOYEE 
WHERE SUBSTR(EMP_NO, 8, 1) = 2 AND ENT_YN='Y');

SELECT ROWNUM, EMP_NAME, SALARY
FROM EMPLOYEE
WHERE ROWNUM <= 5
ORDER BY SALARY DESC;

WITH TOPN_SAL AS (SELECT EMP_NAME, SALARY FROM EMPLOYEE ORDER BY SALARY DESC)
SELECT ROWNUM, EMP_NAME, SALARY FROM TOPN_SAL;

SELECT 순위, EMP_NAME, SALARY
FROM (
SELECT EMP_NAME, SALARY, RANK() OVER(ORDER BY SALARY DESC) AS 순위
FROM EMPLOYEE
ORDER BY SALARY DESC
);

SELECT EMP_NAME, SALARY, RANK() OVER(ORDER BY SALARY DESC) AS 순위
FROM EMPLOYEE;

DESC EMPLOYEE;
DESC DEPARTMENT;

SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
NATURAL JOIN DEPARTMENT;

SELECT ROWNUM, EMP_NAME, SALARY
FROM (SELECT *
FROM EMPLOYEE
ORDER BY SALARY DESC)
WHERE ROWNUM <= 5; 

--단일행 -1 GRUOP BY없이 그룹함수 사용
SELECT SUM(COMM) FROM EMP;
-- NULL이 있으면 카운트 하지 않음
SELECT COUNT(COMM) FROM EMP; --4
-- NULL을 다른걸로 바꿔서 카운트 해줌
SELECT COUNT(NVL(COMM, 0)) FROM EMP; --12 

--단일행 -2 WHERE PK칼럼명 = 값 (무조건 유일한 값 찾기)
SELECT * FROM EMP WHERE EMPNO=7499;

--연산자 
SELECT EMPNO, ENAME, SAL FROM EMP
WHERE SAL > ANY(SELECT SAL FROM EMP WHERE JOB = 'SALESMAN');


SELECT EMPNO, ENAME, SAL FROM EMP
WHERE SAL > ALL(SELECT SAL FROM EMP WHERE JOB = 'MANAGER');

SELECT EMPNO, ENAME, SAL FROM EMP E
WHERE EXISTS (SELECT S.EMPNO FROM EMP S WHERE S.MGR =E.EMPNO);

SELECT AA.R1, ENAME, HIREDATE 
FROM(SELECT ROWNUM R1, ENAME, HIREDATE  FROM EMP 
ORDER BY HIREDATE) AA
WHERE AA.R1 BETWEEN 2 AND 6;

SELECT *
    FROM (SELECT T1.*, ROWNUM R1 
        FROM(SELECT ENAME, SAL, HIREDATE 
            FROM EMP
            ORDER BY HIREDATE DESC)T1
            ) T2
        WHERE R1 =3;
        
WITH T1 AS(SELECT ENAME, SAL, DEPTNO FROM EMP ORDER BY SAL DESC)
SELECT ROWNUM, ENAME, SAL, DEPTNO FROM EMP WHERE ROWNUM < 4;
    
SELECT 순위, ENAME, SAL FROM (
    SELECT ENAME, SAL, RANK() OVER(ORDER BY SAL) AS 순위 FROM EMP)
    WHERE 순위 BETWEEN 2 AND 6
    ORDER BY 순위 DESC;
    
SELECT ENAME, SAL, DEPTNO, SUM(SAL) OVER() A, SUM(SAL) OVER(PARTITION BY deptno) B FROM EMP;

SELECT ENAME, SAL, DEPTNO, 
SUM(SAL) OVER() A, 
SUM(SAL) OVER(PARTITION BY deptno) B,
DENSE_RANK() OVER(ORDER BY SAL) C,
RANK() OVER(PARTITION BY deptno ORDER BY SAL) D
FROM EMP
ORDER BY DEPTNO;

SELECT ename
     , sal
     , RATIO_TO_REPORT(sal) OVER() AS sal_ratio
  FROM emp
 WHERE job = 'MANAGER';

SELECT empno
     , ename
     , job
     , sal
     , LAG(job) OVER(PARTITION BY job ORDER BY empno) AS empno_prev
  FROM emp 
 WHERE job IN ('MANAGER', 'ANALYST', 'SALESMAN');
 
 SELECT empno
     , ename
     , job
     , sal
     , LEAD(empno, 2, 9999) OVER(ORDER BY empno) AS empno_next
  FROM emp 
 WHERE job IN ('MANAGER', 'ANALYST', 'SALESMAN');
 
 SELECT EMPNO, DEPTNO, SAL
		, SUM(SAL) OVER (ORDER BY EMPNO) "win0"
    , SUM(SAL) OVER (ORDER BY EMPNO ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) "win0와 동일"
    , SUM(SAL) OVER () "win1과 동일"
    , SUM(SAL) OVER (ORDER BY EMPNO ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) "win1"
        -- rows : 부분그룹인 윈도우의 크기를 물리적인 단위로 행집합을 지정
        -- unbounded preceding : 윈도우의 첫행
        -- unbounded following : 윈도우의 마지막행
--    , SUM(SAL) OVER (PARTITION BY DEPTNO ORDER BY EMPNO ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) "win2"
        -- 윈도우의 시작행에서 현재 위치(current row) 까지의 합계를 구해서 win2에
--    , SUM(SAL) OVER (PARTITION BY DEPTNO ORDER BY EMPNO ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) "win3"
        -- 현재 위치에서 윈도우의 마지막행까지의 합계를 구해서 win3에
        
--    , SUM(SAL) OVER (PARTITION BY DEPTNO ORDER BY EMPNO ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) "win4" -- 1 preceding and 1 following 
        -- 현재 행을 중심으로 이전행과 다음행의 급여합계
    FROM EMP
--    WHERE DEPTNO = 30
    ;
    
SELECT EMPNO, ENAME, DEPTNO, HIREDATE
FROM EMP E ORDER BY (SELECT DNAME FROM DEPT
WHERE DEPTNO = E.DEPTNO) ;

SELECT * FROM DEPT ORDER BY DNAME;
